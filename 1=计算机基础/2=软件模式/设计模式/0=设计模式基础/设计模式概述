## 介绍

*   是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。
*   意义
    *   在一定的情景下，用固有的套路处理问题
*   本质
    *   是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解

## 基本要素

*   模式名称、别名、动机、问题、解决方案、效果、结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等
*   模式名称
*   问题
    *   该模式应用环境
    *   即何时使用该模式。
    *   它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。

## 基础

* 设计模式的基础就是   ：多态

## 分类

### 按照目的分

*   创建型
    *   描述    : 怎样创建对象
    *   特点是 : 将对象的创建与使用分离
    *   提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象
*   结构型模式
    *   描述  : 如何将类或对象按某种布局组成更大的结构
    *   关注类和对象的组合
*   行为型模式
    *   描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。
    *   特别关注对象之间的通信。

### 作用范围

*   类模式

    *   用于处理类与子类之间的关系
    *   这些关系通过继承来建立，是静态的，在编译时刻便确定下来了

*   对象模式

    *   用于处理对象之间的关系
    *   这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性

*   汇总

    | 范围\目的 | 创建型模式                   | 结构型模式                                        | 行为型模式                                                   |
    | --------- | ---------------------------- | ------------------------------------------------- | ------------------------------------------------------------ |
    | 类模式    | 工厂方法                     | (类）适配器                                       | 模板方法、解释器                                             |
    | 对象模式  | 单例  原型  抽象工厂  建造者 | 代理  (对象）适配器  桥接  装饰  外观  享元  组合 | 策略  命令  职责链  状态  观察者  中介者  迭代器  访问者  备忘录 |



## 设计原则

* 目的时为了 ： 高内聚 ， 低耦合























































