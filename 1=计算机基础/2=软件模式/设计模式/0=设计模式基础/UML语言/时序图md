# 时序图

* sequence diagram
* 是个二维图
    * 横轴：对象
    * 纵轴:：时间
    * 消息在各对象之间横向传递，依照时间顺序纵向传递
    * 更直观的表现**各个对象交互的时间顺序**，将体现的重点放在 **以时间为参照，各个对象发送、接收消息，处理消息，返回消息的 时间流程顺序**，也称为时序图。 

# 元素

## 1. 角色

	* actor
	* 系统角色，可以使人、其他系统或者子系统	

## 2. 对象

   * object
   * 交互的主体，接受发送消息的主体，最基本的元素 
   * 命名
     * 对象名：类名	  classinstance  : class
     * 匿名类                                        ：class
     * 对象名                classinstance
   * 创建时机
     * 处于顶部：交互开始的时候，对象就已经存在了
     * 不在顶部：对象在交互过程中创建

## 3. 生命线

   *  角色和对象下面垂直的虚线。代表角色和对象在一段时间类存在。 

## 4. 激活

   *  对象操作执行时期，处于激活的状态。使用条状矩形表示，附着于对象生命线上 

## 5. 消息

   * 对象之间发出的交互 

   * ######  同步消息=调用消息：

     * 消息的发送者把控制传递给消息的接收者，然后停止活动，等待消息的接收者放弃或者返回控制。用来表示同步的意义。 

   * ######  异步消息：

     * 消息发送者通过消息把信号传递给消息的接收者，然后继续自己的活动，不等待接受者返回消息或者控制。异步消息的接收者和发送者是并发工作的。 

   * ######  返回消息：

     * 返回消息表示从过程调用返回。 

   * ######  自关联消息：

     * 表示方法的自身调用以及一个对象内的一个方法调用另外一个方法。 

   * ###### 声明周期停止

     * 虚线下边的叉号

## 6.  控制焦点 

   *  控制焦点是顺序图中表示时间段的符号，在这个时间段内对象将执行相应的操作 
   *  长方形

## 7. 绘制对象注意颗粒度

   *  .虚拟业务对象：不是用户实际接触到的东西，只是信息流与关系的搭建。 
   *  实际交互对象：用户实际打交道的。 
   *  体程序的各个类对象，（软件工程师必须精细到的程度） 

## 9.  组合片段

* 在方框里面

### alt

* 判断 ： if else

    

### loop

* 循环

### opt 

* switch 当满足不同条件执行不同的方法

#### par

* 并行进行

     