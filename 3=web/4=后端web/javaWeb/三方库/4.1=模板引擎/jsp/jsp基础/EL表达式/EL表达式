## 介绍

```java
介绍
	全称是：Expression Language。
	是表达式语言。
作用
    代替 jsp 页面中的表达式脚本在 jsp 页面中进行数据的输出。
优势
     EL 表达式在输出数据的时候，要比 jsp 的表达式脚本要简洁很多。
```

## 使用

### 基础

```java
格式
    ${表达式}
结果
    EL 表达式在输出 null 值的时候，输出的是空串。
    jsp 表达式脚本输出 null 值的时候，输出的是 null 字符串
语法例子
    <%=request.getAttribute("key1")==null?"":request.getAttribute("key1")%><br/> 
    EL 表达式输出 key 的值是：${key1}
```

### 域搜索顺序

```java
当四个域中都有相同的 key 的数据的时候，EL 表达式会按照四个域的从小到大的顺序去进行搜索，找到就输出。
```





## 运算符

### 介绍

```java
格式
    ${ 运算表达式 }
   
```

### 关系运算符

```
== 或 eq		等于  
!= 或 ne  	不等于   
< 或 lt 		小于
> 或 gt 		大于
 <= 或 le	小于等于
>= 或 ge  	大于等于
```

### 逻辑运算符

```java
&& 或 and 与运算 
|| 或 or   或运算 
! 或 not  取反运算
```

### 算术运算符

```java
+ 加法 
    - 减法 
    * 乘法 
    / 或 div  除法 
    % 或 mod 取模
```

### 三元计算符

```java
表达式1？ true返回： false返回；
```

### 其他运算

#### empty

```java
介绍
    判断一个数据是否为空，如果为空，则输出 true,不为空输出 false
空的情况
    值为 null 值的时候，为空 、值为空串的时候，为空 、
    值是 Object 类型数组，长度为零的时候 、
    list 集合，元素个数为零 、
    map 集合，元素个数为零
语法例子
    <%
    	// 1、值为 null 值的时候，为空 
    		request.setAttribute("emptyNull", null); 
		// 2、值为空串的时候，为空 
			request.setAttribute("emptyStr", "");
    %>
	${ empty emptyNull } <br/> 
     ${ empty emptyStr } <br/>
```



#### 点运算 + 中括号运算

```java
.点运算
    可以输出 Bean 对象中某个属性的值。
[]中括号运算
    可以输出有序集合中某个元素的值    
	可以输出 map 集合中 key 里含有特殊字符的 key 的值
语法例子
    <body> 
    	<% 
    		Map<String,Object> map = new HashMap<String, Object>(); 
			map.put("a.a.a", "aaaValue"); 
			request.setAttribute("map", map); 
		%> 
         ${ map['a.a.a'] } <br> 
	 </bod>
```



## 11 个隐含对象

### 介绍

```JAVA
变量 类型 作用 
	pageContext  	PageContextImpl 它可以获取 jsp 中的九大内置对象 
    pageScope  		Map<String,Object>  获取 pageContext 域中的数据 
    requestScope 	 Map<String,Object>  获取 Request 域中的数据 
    sessionScope 	 Map<String,Object>  获取 Session 域中的数据 
    applicationScope  Map<String,Object>  获取 ServletContext 域中的数据 
    
    param 			 Map<String,String>  获取请求参数的值 
    paramValues 	 Map<String,String[]>  可以获取请求参数的值，获取多个值的时候使用
    
    header 			Map<String,String>  获取请求头的信息 
    headerValues     Map<String,String[]>  获取请求头的信息，它可以获取多个值的情况 
    
    cookie 			 Map<String,Cookie>  获取当前请求的 Cookie 信息
    
    initParam 		Map<String,String>    获取在 web.xml 中配置的<context-param>上下文参数
```

### 四个特定域中的属性

```java
介绍
    四个域从组小的开始找
类型    
    pageScope ======  pageContext 域 
    requestScope ======  Request 域 
    sessionScope ====== Session 域 
    applicationScope ======  ServletContext 域
    
使用
    <%
     	pageContext.setAttribute("key1", "pageContext1");
    %>
   ${ applicationScope.key1 }
```

### pageContext 对象的使用

```java
功能
	1. 协议： 
    2. 服务器 ip： 
    3. 服务器端口： 
    4. 获取工程路径： 
    5. 获取请求方法： 
    6. 获取客户端 ip 地址： 
    7. 获取会话的 id 编号：
语法例子
	<%-- 
        request.getScheme() 它可以获取请求的协议 
        request.getServerName() 获取请求的服务器 ip 或域名 
        request.getServerPort() 获取请求的服务器端口号 
        getContextPath() 获取当前工程路径 
        request.getMethod() 获取请求的方式（GET 或 POST） 
        request.getRemoteHost() 获取客户端的 ip 地址 
        session.getId() 获取会话的唯一标识 
    --%> 
    <% 
    	pageContext.setAttribute("req", request);
	%>
     <%=request.getScheme() %> 
```

### param

```java
param  Map<String,String>  它可以获取请求参数的值 
paramValues  Map<String,String[]>  它也可以获取请求参数的值，获取多个值的时候使用。
    
	输出请求参数 username 的值：${ param.username } <br> 
     输出请求参数 password 的值：${ param.password } <br> 
    
    输出请求参数 username 的值：${ paramValues.username[0] } <br> 
    输出请求参数 hobby 的值：${ paramValues.hobby[0] } <br> 
    输出请求参数 hobby 的值：${ paramValues.hobby[1] } <br>
```

### header

```java
header 			Map<String,String>  获取请求头的信息 
headerValues     Map<String,String[]>  获取请求头的信息，它可以获取多个值的情况 
    
输出请求头【User-Agent】的值：${ header['User-Agent'] } <br> 
输出请求头【Connection】的值：${ header.Connection } <br> 
输出请求头【User-Agent】的值：${ headerValues['User-Agent'][0] } <br> 
```

### cookie

```java
cookie 			 Map<String,Cookie>  获取当前请求的 Cookie 信息

获取 Cookie 的名称：${ cookie.JSESSIONID.name } <br> 
获取 Cookie 的值：${ cookie.JSESSIONID.value } <br>
```

### initParam

```java
 initParam 		Map<String,String>    获取在 web.xml 中配置的<context-param>上下文参数
   
// xml     
<context-param> 
     <param-name>username</param-name> 
     <param-value>root</param-value> 
</context-param>
<context-param> 
     <param-name>url</param-name> 
     <param-value>jdbc:mysql:///test</param-value> 
</context-param>

输出&lt;Context-param&gt;username 的值：${ initParam.username } <br> 
输出&lt;Context-param&gt;url 的值：${ initParam.url } <br>    
```

